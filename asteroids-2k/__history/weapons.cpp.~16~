/*!****************************************************************************

	@file	weapons.h
	@file	weapons.cpp

	@brief	Weapons modelling

	@noop	author:	Francesco Settembrini
	@noop	last update: 23/6/2021
	@noop	e-mail:	mailto:francesco.settembrini@poliba.it

******************************************************************************/

#include <windows.h>

#include "weapons.h"



/*!****************************************************************************
* @brief	Builds the missile
* @param	pVM Pointer to the video manager data structure
******************************************************************************/
TMissile::TMissile(TVideoManager* pVM)
{
	assert(pVM);

	m_pVM = pVM;
	m_pShip = NULL;
	m_bArmed = false;

	m_Pos = TVector2(-10,-10);
	m_Vel = TVector2(0,0);
}

/*!****************************************************************************
* @brief	Builds the missile
* @param	pVM Pointer to the video manager data structure
* @param	Pos Initial position of the missile
* @param	Vel Initial velocity of the missile
******************************************************************************/
TMissile::TMissile(TVideoManager* pVM, TVector2 Pos, TVector2 Vel)
{
	assert(pVM);

	m_Pos = Pos;
	m_Vel = Vel;
	m_pVM = pVM;
	m_pShip = NULL;
	m_bArmed = false;
}

/*!****************************************************************************
* @brief	Set the pointer to the ship
* @param	pShip The pointer to the TShip object
******************************************************************************/
void TMissile::SetShip(TShip* pShip)
{
	m_pShip = pShip;
}

/*!****************************************************************************
* @brief	Gets the missile position
* @return	The position of the missile
******************************************************************************/
TVector2 TMissile::GetPos()
{
	return m_Pos;
}

/*!****************************************************************************
* @brief	Gets the status of missile
* @return	Returns true if the missile is armed, false otherwise
******************************************************************************/
bool TMissile::IsArmed()
{
	return m_bArmed;
}

/*!****************************************************************************
* @brief	Arms the missile
* @param	Pos The position of the missile
* @param	Vel The velocity of the missile
******************************************************************************/
void TMissile::Arm(TVector2 Pos, TVector2 Vel)
{
	m_Pos = Pos;
	m_Vel = Vel;
	m_bArmed = true;
	m_Color = RGB(255,255,255);
}

/*!****************************************************************************
* @brief	Updates by time the missile status
* @param	Dt The value for the delta time
******************************************************************************/
void TMissile::Update(double Dt)
{
	assert(m_pVM);

	m_Pos.X += m_Vel.X * Dt;
	m_Pos.Y += m_Vel.Y * Dt;

	DrawPoint(m_pVM, m_Pos, m_Color);
}

/*!****************************************************************************
* @brief	Deletes a bunch of missiles referenced by a vector of pointers
* @param	Missiles Referernce to a list of pointers to missiles
******************************************************************************/
void Clear(TVecPtrMissiles& Missiles)
{
	for(int i=0; i<Missiles.size(); i++)
	{
		if( Missiles[i] )
		{
			delete Missiles[i];
			Missiles[i] = NULL;
		}
	}

	Missiles.clear();
}
